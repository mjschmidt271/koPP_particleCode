name: "clang format"

# if .{cpp,hpp} files are touched in a PR, lint them!

on:
  pull_request:
    branches: ["main"]
    paths:
      - 'src/**/*.cpp'
      - 'src/**/*.hpp'
      - '.github/**/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  clang-format-linter:
    if: ${{ github.repository == 'mjschmidt271/koPP_particleCode' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    # - uses: tj-actions/changed-files@v46
    #   id: changed-files
    #   with:
    #     files: 'src/**/*.{cpp,hpp}'
    #     separator: " "
    # comment
    # displays the diff, comparing to the changes that *would* be made
    - uses: mjschmidt271/clang-format-lint-action@mjs/file-summary-on-fail
      # still want to return the offending files, so we'll use this step's
      # "outcome" in a later step to manually fail the job
      continue-on-error: true
      id: run-clang-format
      with:
        source: './src/clf_test'
        exclude: ''
        extensions: 'hpp,cpp'
        clangFormatVersion: 14
        style: llvm
    - name: simple print
      run: echo "${{ steps.run-clang-format.outputs.files }}"
    - name: return files
      env:
        FAIL_FILES: ${{ toJSON(steps.run-clang-format.outputs.files) }}
      run: |
        # echo "output files - $FAIL_FILES"
        # echo "first entry = ${FAIL_FILES[0]}"
        # cat $GITHUB_STEP_SUMMARY > gss_temp
        # echo "## Status: `clang-format` Check Failed" >> $GITHUB_STEP_SUMMARY
        # echo "The following files require formatting:" >> $GITHUB_STEP_SUMMARY
        echo "${FAIL_FILES}" >> $GITHUB_STEP_SUMMARY

        # echo 'task goes here' | cat - todo.txt > temp && mv temp todo.txt
    - name: evaluate test status
      if: ${{ steps.run-clang-format.outcome }}
      run: exit 1
    # TODO: only print on fail
